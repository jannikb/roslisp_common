(in-package :actionlib-test)

(define-test simple-csm-cancel-from-pending 
  (let ((scsm (make-instance 'actionlib::simple-comm-state-machine)))
    (actionlib::transition-to scsm :send-goal)
    (assert-equal :pending (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :pending)
    (assert-equal :pending (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :cancel-goal)
    (assert-equal :pending (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :preempting)
    (assert-equal :active (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :succeeded)
    (assert-equal :active (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :receive)
    (assert-equal :done (actionlib::comm-state scsm))))

(define-test simple-csm-cancel-from-active
  (let ((scsm (make-instance 'actionlib::simple-comm-state-machine)))
    (actionlib::transition-to scsm :send-goal)
    (assert-equal :pending (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :active)
    (assert-equal :active (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :cancel-goal)
    (assert-equal :active (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :recalling)
    (assert-equal :pending (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :recalled)
    (assert-equal :pending (actionlib::comm-state scsm))
    (actionlib::transition-to scsm :receive)
    (assert-equal :done (actionlib::comm-state scsm))))